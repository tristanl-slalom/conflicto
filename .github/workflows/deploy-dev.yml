name: Deploy to Development

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'ai-docs/**'
      - '.github/prompts/**'

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: development
    outputs:
      backend_service_name: ${{ steps.terraform.outputs.backend_service_name }}
      frontend_service_name: ${{ steps.terraform.outputs.frontend_service_name }}
      cluster_name: ${{ steps.terraform.outputs.cluster_name }}
      application_url: ${{ steps.terraform.outputs.application_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ~1.5

      - name: Terraform Init
        working-directory: iac/environments/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: iac/environments/dev
        run: |
          terraform plan \
            -var="backend_image_uri=ghcr.io/tristanl-slalom/conflicto/backend:${{ github.sha }}" \
            -var="frontend_image_uri=ghcr.io/tristanl-slalom/conflicto/frontend:${{ github.sha }}" \
            -out=tfplan

      - name: Terraform Apply
        id: terraform
        working-directory: iac/environments/dev
        run: |
          terraform apply tfplan

          # Export outputs for next jobs
          echo "backend_service_name=$(terraform output -raw backend_service_name)" >> $GITHUB_OUTPUT
          echo "frontend_service_name=$(terraform output -raw frontend_service_name)" >> $GITHUB_OUTPUT
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "application_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT

  run-migrations:
    name: Database Migrations
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Dependencies
        working-directory: backend
        run: |
          pip install poetry
          poetry install --only=main

      - name: Run Database Migrations
        working-directory: backend
        env:
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          ENVIRONMENT: dev
        run: |
          poetry run python scripts/migrate.py

  deploy-applications:
    name: Deploy Applications
    needs: [deploy-infrastructure, run-migrations]
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Services
        run: |
          # Update backend service with new image
          echo "Updating backend service: ${{ needs.deploy-infrastructure.outputs.backend_service_name }}"
          aws ecs update-service \
            --cluster ${{ needs.deploy-infrastructure.outputs.cluster_name }} \
            --service ${{ needs.deploy-infrastructure.outputs.backend_service_name }} \
            --force-new-deployment

          # Wait for backend deployment to stabilize
          echo "Waiting for backend service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ needs.deploy-infrastructure.outputs.cluster_name }} \
            --services ${{ needs.deploy-infrastructure.outputs.backend_service_name }}

      - name: Health Check
        env:
          HEALTH_CHECK_URL: ${{ needs.deploy-infrastructure.outputs.application_url }}
          HEALTH_CHECK_MAX_ATTEMPTS: 20
          HEALTH_CHECK_DELAY: 10
        run: |
          # Install dependencies for health check
          pip install httpx

          # Run health check
          cd backend
          python scripts/health-check.py

  integration-tests:
    name: Integration Tests
    needs: deploy-applications
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Test Dependencies
        working-directory: tests/integration
        run: |
          pip install pytest pytest-asyncio httpx

      - name: Run Integration Tests
        env:
          TEST_BASE_URL: ${{ needs.deploy-infrastructure.outputs.application_url }}
        working-directory: tests/integration
        run: |
          python -m pytest test_deployed_environment.py -v

  notify-deployment:
    name: Notify Deployment Status
    needs: [deploy-infrastructure, run-migrations, deploy-applications, integration-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment Success
        if: ${{ needs.deploy-applications.result == 'success' && needs.integration-tests.result == 'success' }}
        run: |
          echo "ðŸŽ‰ Development deployment successful!"
          echo "Application URL: ${{ needs.deploy-infrastructure.outputs.application_url }}"

      - name: Deployment Failure
        if: ${{ failure() }}
        run: |
          echo "ðŸ’¥ Development deployment failed!"
          echo "Check the logs above for details."
          exit 1
