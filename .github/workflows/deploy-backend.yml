name: Build and Deploy Backend to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to AWS using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEPLOYER_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Set environment variables
      - name: Set environment variables
        id: vars
        env:
          ENV: ${{ github.event.inputs.environment || 'dev' }}
        run: |
          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          echo "image_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "ecr_registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT
          echo "ecr_repository=conflicto-${ENV}-backend" >> $GITHUB_OUTPUT
          echo "image_uri=${{ steps.login-ecr.outputs.registry }}/conflicto-${ENV}-backend:${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # Build and push Docker image
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.vars.outputs.ecr_repository }}
          IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Update ECS task definition with new image
      - name: Download current task definition
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          aws ecs describe-task-definition \
            --task-definition conflicto-${ENV}-task \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: app
          image: ${{ steps.vars.outputs.image_uri }}

      # Inject environment variables into task definition
      - name: Inject environment variables
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          # Generate a random secret key for this deployment
          SECRET_KEY="production-secret-key-$(openssl rand -hex 32)"

          # Try to get database URL from AWS Secrets Manager
          DATABASE_URL=$(aws secretsmanager get-secret-value \
            --secret-id "conflicto-${ENV}/db" \
            --query 'SecretString' --output text 2>/dev/null | jq -r '.url' 2>/dev/null || echo "")

          # If we couldn't get from secrets manager, try to construct it
          if [ -z "$DATABASE_URL" ]; then
            echo "Could not retrieve DATABASE_URL from secrets manager, constructing from RDS info..."
            RDS_ENDPOINT=$(aws rds describe-db-instances \
              --db-instance-identifier conflicto-${ENV}-db \
              --query 'DBInstances[0].Endpoint.Address' \
              --output text 2>/dev/null || echo "")

            if [ -n "$RDS_ENDPOINT" ]; then
              # Try to get password from secrets manager
              DB_PASSWORD=$(aws secretsmanager get-secret-value \
                --secret-id "conflicto-${ENV}/db" \
                --query 'SecretString' --output text 2>/dev/null | jq -r '.password' 2>/dev/null || echo "caja_password")
              DATABASE_URL="postgresql://caja_user:${DB_PASSWORD}@${RDS_ENDPOINT}:5432/caja_db"
            else
              echo "Warning: Could not retrieve RDS endpoint. Using fallback DATABASE_URL"
              DATABASE_URL="postgresql://caja_user:caja_password@localhost:5432/caja_db"
            fi
          fi

          echo "Setting up environment variables for ${ENV} environment"
          echo "DATABASE_URL configured: ${DATABASE_URL:0:50}..." # Only show first 50 chars for security
          echo "SECRET_KEY generated with length: ${#SECRET_KEY}"

          # Update the task definition with environment variables
          echo "Updating task definition with environment variables..."

          jq --arg database_url "$DATABASE_URL" \
             --arg secret_key "$SECRET_KEY" \
             --arg environment "$ENV" \
             '.containerDefinitions[0].environment = [
               {"name": "DATABASE_URL", "value": $database_url},
               {"name": "SECRET_KEY", "value": $secret_key},
               {"name": "ENVIRONMENT", "value": $environment}
             ]' \
             ${{ steps.task-def.outputs.task-definition }} > updated-task-definition.json

          # Verify the update was successful
          if [ ! -f updated-task-definition.json ]; then
            echo "Error: Failed to create updated task definition"
            exit 1
          fi

          # Replace the task definition file
          mv updated-task-definition.json ${{ steps.task-def.outputs.task-definition }}

          echo "Task definition updated successfully"

      # Run database migrations
      - name: Run database migrations
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          echo "Running database migrations for ${ENV} environment..."

          # Create a one-time task definition for migrations
          cat ${{ steps.task-def.outputs.task-definition }} | \
          jq '.containerDefinitions[0].command = ["poetry", "run", "alembic", "upgrade", "head"]' \
          > migration-task-def.json

          # Ensure the migration task has the same IAM role as the main app
          echo "Migration task definition:"
          cat migration-task-def.json | jq '.'

          # Check what IAM roles are being used
          EXECUTION_ROLE_ARN=$(cat migration-task-def.json | jq -r '.executionRoleArn // "none"')
          TASK_ROLE_ARN=$(cat migration-task-def.json | jq -r '.taskRoleArn // "none"')

          echo "Execution Role ARN: $EXECUTION_ROLE_ARN"
          echo "Task Role ARN: $TASK_ROLE_ARN"

          # Verify the task role has RDS permissions by checking attached policies
          if [ "$TASK_ROLE_ARN" != "none" ]; then
            ROLE_NAME=$(echo $TASK_ROLE_ARN | awk -F'/' '{print $NF}')
            echo "Checking policies for role: $ROLE_NAME"

            echo "Attached managed policies:"
            aws iam list-attached-role-policies --role-name "$ROLE_NAME" --output table || true

            echo "Inline policies:"
            aws iam list-role-policies --role-name "$ROLE_NAME" --output table || true
          fi

          # Register the migration task definition
          MIGRATION_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://migration-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "Registered migration task definition: $MIGRATION_TASK_DEF_ARN"

          # If the role doesn't have RDS permissions, we need to add them
          # Check if there's a separate database access role we should be using
          echo "Checking for existing database access role..."

          # Look for a conflicto-dev-db-access or conflicto-dev-ecs-task role with RDS permissions
          DB_ROLE_ARN=""

          # Try to find a role with database in the name
          POTENTIAL_DB_ROLES=$(aws iam list-roles \
            --query "Roles[?contains(RoleName, 'conflicto-${ENV}') && (contains(RoleName, 'db') || contains(RoleName, 'rds') || contains(RoleName, 'task'))].{RoleName:RoleName,Arn:Arn}" \
            --output text 2>/dev/null || true)

          if [ -n "$POTENTIAL_DB_ROLES" ]; then
            echo "Found potential database roles:"
            echo "$POTENTIAL_DB_ROLES"

            # For now, let's use the first one that looks like a task role
            DB_ROLE_ARN=$(echo "$POTENTIAL_DB_ROLES" | grep -E "(task|ecs)" | head -n1 | awk '{print $2}' || echo "")
          fi

          # If we found a better role, update the migration task definition
          if [ -n "$DB_ROLE_ARN" ] && [ "$DB_ROLE_ARN" != "$TASK_ROLE_ARN" ]; then
            echo "Updating migration task to use database-enabled role: $DB_ROLE_ARN"

            cat migration-task-def.json | \
            jq --arg role_arn "$DB_ROLE_ARN" '.taskRoleArn = $role_arn' \
            > migration-task-def-updated.json

            # Re-register with the updated role
            MIGRATION_TASK_DEF_ARN=$(aws ecs register-task-definition \
              --cli-input-json file://migration-task-def-updated.json \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)

            echo "Re-registered migration task definition with DB role: $MIGRATION_TASK_DEF_ARN"
          fi

          # Get a subnet for running the migration task
          echo "Looking for subnets..."

          # Try to find data subnets first (these have proper database access)
          SUBNET_ID=$(aws ec2 describe-subnets \
            --filters "Name=tag:Name,Values=conflicto-${ENV}-data-*" \
            --query 'Subnets[0].SubnetId' \
            --output text 2>/dev/null)

          if [ "$SUBNET_ID" = "None" ] || [ -z "$SUBNET_ID" ]; then
            echo "Warning: Could not find data subnet, trying app subnets..."
            SUBNET_ID=$(aws ec2 describe-subnets \
              --filters "Name=tag:Name,Values=conflicto-${ENV}-app-*" \
              --query 'Subnets[0].SubnetId' \
              --output text 2>/dev/null)
          fi

          if [ "$SUBNET_ID" = "None" ] || [ -z "$SUBNET_ID" ]; then
            echo "Error: Could not find any suitable subnet"
            echo "Available subnets:"
            aws ec2 describe-subnets --query 'Subnets[].{SubnetId:SubnetId,Name:Tags[?Key==`Name`].Value|[0],VpcId:VpcId}' --output table
            exit 1
          fi

          echo "Selected subnet: $SUBNET_ID"

          # Get security groups - need both app and database access
          echo "Looking for security groups..."

          # Get the app security group (for general access)
          APP_SECURITY_GROUP_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=conflicto-${ENV}-app*" \
            --query 'SecurityGroups[0].GroupId' \
            --output text 2>/dev/null)

          # Get the database security group (for RDS access)
          DB_SECURITY_GROUP_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=conflicto-${ENV}-db*" \
            --query 'SecurityGroups[0].GroupId' \
            --output text 2>/dev/null)

          # Build security group list
          SECURITY_GROUPS=""
          if [ "$APP_SECURITY_GROUP_ID" != "None" ] && [ -n "$APP_SECURITY_GROUP_ID" ]; then
            SECURITY_GROUPS="$APP_SECURITY_GROUP_ID"
            echo "Found app security group: $APP_SECURITY_GROUP_ID"
          fi

          if [ "$DB_SECURITY_GROUP_ID" != "None" ] && [ -n "$DB_SECURITY_GROUP_ID" ]; then
            if [ -n "$SECURITY_GROUPS" ]; then
              SECURITY_GROUPS="$SECURITY_GROUPS,$DB_SECURITY_GROUP_ID"
            else
              SECURITY_GROUPS="$DB_SECURITY_GROUP_ID"
            fi
            echo "Found database security group: $DB_SECURITY_GROUP_ID"
          fi

          # If no specific security groups found, try to find any that allow database access
          if [ -z "$SECURITY_GROUPS" ]; then
            echo "Warning: Could not find specific security groups, looking for any with database access..."
            FALLBACK_SG=$(aws ec2 describe-security-groups \
              --filters "Name=group-name,Values=*${ENV}*" \
              --query 'SecurityGroups[0].GroupId' \
              --output text 2>/dev/null)

            if [ "$FALLBACK_SG" != "None" ] && [ -n "$FALLBACK_SG" ]; then
              SECURITY_GROUPS="$FALLBACK_SG"
            fi
          fi

          if [ -z "$SECURITY_GROUPS" ]; then
            echo "Error: Could not find any suitable security groups"
            echo "Available security groups:"
            aws ec2 describe-security-groups --query 'SecurityGroups[].{GroupId:GroupId,GroupName:GroupName,VpcId:VpcId}' --output table
            exit 1
          fi

          echo "Running migration task..."
          echo "Subnet: $SUBNET_ID"
          echo "Security Groups: $SECURITY_GROUPS"

          # Run the migration task with proper security groups
          MIGRATION_TASK_ARN=$(aws ecs run-task \
            --cluster conflicto-${ENV}-cluster \
            --task-definition $MIGRATION_TASK_DEF_ARN \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUPS],assignPublicIp=DISABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)

          echo "Migration task ARN: $MIGRATION_TASK_ARN"

          # Wait for migration to complete
          echo "Waiting for migration to complete..."

          # Monitor task status for 5 minutes max
          echo "Monitoring task progress..."
          for i in {1..10}; do
            TASK_STATUS=$(aws ecs describe-tasks \
              --cluster conflicto-${ENV}-cluster \
              --tasks $MIGRATION_TASK_ARN \
              --query 'tasks[0].lastStatus' \
              --output text 2>/dev/null || echo "UNKNOWN")

            echo "Task status ($i/10): $TASK_STATUS"

            if [ "$TASK_STATUS" = "STOPPED" ]; then
              break
            fi

            sleep 30
          done

          # Final wait for tasks to be fully stopped
          aws ecs wait tasks-stopped \
            --cluster conflicto-${ENV}-cluster \
            --tasks $MIGRATION_TASK_ARN

          # Check if migration succeeded
          MIGRATION_EXIT_CODE=$(aws ecs describe-tasks \
            --cluster conflicto-${ENV}-cluster \
            --tasks $MIGRATION_TASK_ARN \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)

          if [ "$MIGRATION_EXIT_CODE" != "0" ]; then
            echo "Migration failed with exit code: $MIGRATION_EXIT_CODE"

            # Get migration logs for debugging
            echo "Migration task logs:"
            aws logs filter-log-events \
              --log-group-name "/ecs/conflicto-${ENV}-task" \
              --start-time $(date -d '5 minutes ago' +%s)000 \
              --filter-pattern "migration" || true

            exit 1
          fi

          echo "✅ Database migration completed successfully"

      # Fix database connectivity for ECS service
      - name: Ensure database connectivity for ECS service
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          echo "Checking database connectivity for ECS service..."

          # Get the app security group that ECS service uses
          APP_SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=conflicto-${ENV}-app-sg" \
            --query 'SecurityGroups[0].GroupId' \
            --output text 2>/dev/null)

          # Get the database security group
          DB_SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=conflicto-${ENV}-db*" \
            --query 'SecurityGroups[0].GroupId' \
            --output text 2>/dev/null)

          echo "App Security Group: $APP_SG_ID"
          echo "Database Security Group: $DB_SG_ID"

          # Check if database security group allows connections from app security group
          if [ -n "$DB_SG_ID" ] && [ "$DB_SG_ID" != "None" ] && [ -n "$APP_SG_ID" ] && [ "$APP_SG_ID" != "None" ]; then
            echo "Checking existing database security group rules..."

            EXISTING_RULE=$(aws ec2 describe-security-groups \
              --group-ids "$DB_SG_ID" \
              --query "SecurityGroups[0].IpPermissions[?FromPort==\`5432\` && ToPort==\`5432\` && UserIdGroupPairs[?GroupId==\`${APP_SG_ID}\`]]" \
              --output text 2>/dev/null)

            if [ -z "$EXISTING_RULE" ] || [ "$EXISTING_RULE" = "None" ]; then
              echo "Adding security group rule to allow app -> database connectivity..."

              aws ec2 authorize-security-group-ingress \
                --group-id "$DB_SG_ID" \
                --protocol tcp \
                --port 5432 \
                --source-group "$APP_SG_ID" \
                --tag-specifications "ResourceType=security-group-rule,Tags=[{Key=Name,Value=temp-app-to-db},{Key=CreatedBy,Value=github-actions}]" \
                2>/dev/null && echo "✅ Added database connectivity rule" || echo "⚠️  Rule may already exist or permission denied"
            else
              echo "✅ Database connectivity rule already exists"
            fi
          else
            echo "⚠️  Could not find app or database security groups"
            echo "Available security groups:"
            aws ec2 describe-security-groups \
              --filters "Name=group-name,Values=conflicto-${ENV}-*" \
              --query 'SecurityGroups[].{GroupId:GroupId,GroupName:GroupName}' \
              --output table
          fi

      # Deploy to ECS
      - name: Deploy Amazon ECS task definition
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          echo "Starting ECS service deployment..."

          # Get current service status before deployment
          echo "Current service status:"
          aws ecs describe-services \
            --cluster conflicto-${ENV}-cluster \
            --services conflicto-${ENV}-svc \
            --query 'services[0].{Status:status,RunningCount:runningCount,PendingCount:pendingCount,DesiredCount:desiredCount}' \
            --output table || echo "Service not found or error retrieving status"

          # Deploy using the standard action but with custom monitoring
          echo "Deploying new task definition..."

      - name: Deploy with monitoring
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: conflicto-${{ env.ENV }}-svc
          cluster: conflicto-${{ env.ENV }}-cluster
          wait-for-service-stability: false

      - name: Monitor deployment and troubleshoot
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          echo "Monitoring deployment progress..."

          # Wait for up to 10 minutes, checking every 30 seconds
          for i in {1..20}; do
            echo "Check $i/20 - $(date)"

            # Get service status
            SERVICE_STATUS=$(aws ecs describe-services \
              --cluster conflicto-${ENV}-cluster \
              --services conflicto-${ENV}-svc \
              --query 'services[0]' \
              --output json)

            RUNNING_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.runningCount')
            PENDING_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.pendingCount')
            DESIRED_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.desiredCount')

            echo "Service status: Running=$RUNNING_COUNT, Pending=$PENDING_COUNT, Desired=$DESIRED_COUNT"

            # Check if service is stable
            if [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ] && [ "$PENDING_COUNT" = "0" ]; then
              echo "✅ Service is stable!"
              break
            fi

            # Get the latest tasks to see what's happening
            LATEST_TASKS=$(aws ecs list-tasks \
              --cluster conflicto-${ENV}-cluster \
              --service-name conflicto-${ENV}-svc \
              --desired-status RUNNING \
              --query 'taskArns[0:2]' \
              --output text)

            if [ -n "$LATEST_TASKS" ] && [ "$LATEST_TASKS" != "None" ]; then
              echo "Latest task statuses:"
              aws ecs describe-tasks \
                --cluster conflicto-${ENV}-cluster \
                --tasks $LATEST_TASKS \
                --query 'tasks[].{TaskArn:taskArn,LastStatus:lastStatus,HealthStatus:healthStatus,StoppedReason:stoppedReason}' \
                --output table

              # Check for failed tasks
              FAILED_TASKS=$(aws ecs describe-tasks \
                --cluster conflicto-${ENV}-cluster \
                --tasks $LATEST_TASKS \
                --query 'tasks[?lastStatus==`STOPPED` && containers[0].exitCode!=`0`].taskArn' \
                --output text)

              if [ -n "$FAILED_TASKS" ] && [ "$FAILED_TASKS" != "None" ]; then
                echo "❌ Found failed tasks, checking logs..."

                # Get logs for failed tasks
                aws logs filter-log-events \
                  --log-group-name "/ecs/conflicto-${ENV}-task" \
                  --start-time $(date -d '10 minutes ago' +%s)000 \
                  --query 'events[0:10].{Time:timestamp,Message:message}' \
                  --output table || echo "No logs found or error retrieving logs"
              fi
            fi

            sleep 30
          done

          # Final check
          FINAL_RUNNING=$(aws ecs describe-services \
            --cluster conflicto-${ENV}-cluster \
            --services conflicto-${ENV}-svc \
            --query 'services[0].runningCount' \
            --output text)

          FINAL_DESIRED=$(aws ecs describe-services \
            --cluster conflicto-${ENV}-cluster \
            --services conflicto-${ENV}-svc \
            --query 'services[0].desiredCount' \
            --output text)

          if [ "$FINAL_RUNNING" != "$FINAL_DESIRED" ]; then
            echo "❌ Deployment failed - service did not stabilize"
            echo "Final status: $FINAL_RUNNING/$FINAL_DESIRED tasks running"

            # Get comprehensive troubleshooting info
            echo "=== TROUBLESHOOTING INFO ==="

            echo "Service events (last 10):"
            aws ecs describe-services \
              --cluster conflicto-${ENV}-cluster \
              --services conflicto-${ENV}-svc \
              --query 'services[0].events[0:10].{Time:createdAt,Message:message}' \
              --output table

            echo "Security groups and subnets:"
            aws ecs describe-services \
              --cluster conflicto-${ENV}-cluster \
              --services conflicto-${ENV}-svc \
              --query 'services[0].networkConfiguration' \
              --output json

            exit 1
          fi

          echo "✅ Service deployment successful!"

      # Output deployment info
      - name: Deployment summary
        env:
          ENV: ${{ steps.vars.outputs.environment }}
          IMAGE_URI: ${{ steps.vars.outputs.image_uri }}
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${ENV}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${IMAGE_URI}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster:** conflicto-${ENV}-cluster" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** conflicto-${ENV}-svc" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment successful!" >> $GITHUB_STEP_SUMMARY
