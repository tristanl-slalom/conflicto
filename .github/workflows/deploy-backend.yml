name: Build and Deploy Backend to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to AWS using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEPLOYER_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Set environment variables
      - name: Set environment variables
        id: vars
        env:
          ENV: ${{ github.event.inputs.environment || 'dev' }}
        run: |
          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          echo "image_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "ecr_registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT
          echo "ecr_repository=conflicto-${ENV}-backend" >> $GITHUB_OUTPUT
          echo "image_uri=${{ steps.login-ecr.outputs.registry }}/conflicto-${ENV}-backend:${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # Build and push Docker image
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.vars.outputs.ecr_repository }}
          IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Update ECS task definition with new image
      - name: Download current task definition
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          aws ecs describe-task-definition \
            --task-definition conflicto-${ENV}-task \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: app
          image: ${{ steps.vars.outputs.image_uri }}

      # Inject environment variables into task definition
      - name: Inject environment variables
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          # Generate a random secret key for this deployment
          SECRET_KEY="production-secret-key-$(openssl rand -hex 32)"

          # Try to get database URL from AWS Secrets Manager
          DATABASE_URL=$(aws secretsmanager get-secret-value \
            --secret-id "conflicto-${ENV}/db" \
            --query 'SecretString' --output text 2>/dev/null | jq -r '.url' 2>/dev/null || echo "")

          # If we couldn't get from secrets manager, try to construct it
          if [ -z "$DATABASE_URL" ]; then
            echo "Could not retrieve DATABASE_URL from secrets manager, constructing from RDS info..."
            RDS_ENDPOINT=$(aws rds describe-db-instances \
              --db-instance-identifier conflicto-${ENV}-db \
              --query 'DBInstances[0].Endpoint.Address' \
              --output text 2>/dev/null || echo "")

            if [ -n "$RDS_ENDPOINT" ]; then
              # Try to get password from secrets manager
              DB_PASSWORD=$(aws secretsmanager get-secret-value \
                --secret-id "conflicto-${ENV}/db" \
                --query 'SecretString' --output text 2>/dev/null | jq -r '.password' 2>/dev/null || echo "caja_password")
              DATABASE_URL="postgresql://caja_user:${DB_PASSWORD}@${RDS_ENDPOINT}:5432/caja_db"
            else
              echo "Warning: Could not retrieve RDS endpoint. Using fallback DATABASE_URL"
              DATABASE_URL="postgresql://caja_user:caja_password@localhost:5432/caja_db"
            fi
          fi

          echo "Setting up environment variables for ${ENV} environment"
          echo "DATABASE_URL configured: ${DATABASE_URL:0:50}..." # Only show first 50 chars for security
          echo "SECRET_KEY generated with length: ${#SECRET_KEY}"

          # Update the task definition with environment variables
          echo "Updating task definition with environment variables..."

          jq --arg database_url "$DATABASE_URL" \
             --arg secret_key "$SECRET_KEY" \
             --arg environment "$ENV" \
             '.containerDefinitions[0].environment = [
               {"name": "DATABASE_URL", "value": $database_url},
               {"name": "SECRET_KEY", "value": $secret_key},
               {"name": "ENVIRONMENT", "value": $environment}
             ]' \
             ${{ steps.task-def.outputs.task-definition }} > updated-task-definition.json

          # Verify the update was successful
          if [ ! -f updated-task-definition.json ]; then
            echo "Error: Failed to create updated task definition"
            exit 1
          fi

          # Replace the task definition file
          mv updated-task-definition.json ${{ steps.task-def.outputs.task-definition }}

          echo "Task definition updated successfully"

      # Deploy to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: conflicto-${{ env.ENV }}-svc
          cluster: conflicto-${{ env.ENV }}-cluster
          wait-for-service-stability: true

      # Output deployment info
      - name: Deployment summary
        env:
          ENV: ${{ steps.vars.outputs.environment }}
          IMAGE_URI: ${{ steps.vars.outputs.image_uri }}
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${ENV}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${IMAGE_URI}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster:** conflicto-${ENV}-cluster" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** conflicto-${ENV}-svc" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Deployment successful!" >> $GITHUB_STEP_SUMMARY
