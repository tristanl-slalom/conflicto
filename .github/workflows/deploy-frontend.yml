name: Build and Deploy Frontend to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to AWS using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEPLOYER_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Set environment variables
      - name: Set environment variables
        id: vars
        env:
          ENV: ${{ github.event.inputs.environment || 'dev' }}
        run: |
          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          echo "image_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "ecr_registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT
          echo "ecr_repository=conflicto-${ENV}-frontend" >> $GITHUB_OUTPUT
          echo "image_uri=${{ steps.login-ecr.outputs.registry }}/conflicto-${ENV}-frontend:${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # Build and push Docker image
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.vars.outputs.ecr_repository }}
          IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
        run: |
          # Build frontend image from root directory (needs openapi.json)
          docker build -f frontend/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Update ECS task definition with new image
      - name: Download current task definition
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          aws ecs describe-task-definition \
            --task-definition conflicto-${ENV}-frontend-task \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: frontend
          image: ${{ steps.vars.outputs.image_uri }}

      # Deploy to ECS
      - name: Deploy Amazon ECS task definition
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          echo "Starting ECS frontend service deployment..."

          # Get current service status before deployment
          echo "Current service status:"
          aws ecs describe-services \
            --cluster conflicto-${ENV}-cluster \
            --services conflicto-${ENV}-frontend-svc \
            --query 'services[0].{Status:status,RunningCount:runningCount,PendingCount:pendingCount,DesiredCount:desiredCount}' \
            --output table || echo "Service not found or error retrieving status"

          echo "Deploying new task definition..."

      - name: Deploy with monitoring
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: conflicto-${{ env.ENV }}-frontend-svc
          cluster: conflicto-${{ env.ENV }}-cluster
          wait-for-service-stability: false

      - name: Monitor deployment and troubleshoot
        env:
          ENV: ${{ steps.vars.outputs.environment }}
        run: |
          echo "Monitoring deployment progress..."

          # Wait for up to 10 minutes, checking every 30 seconds
          for i in {1..20}; do
            echo "Check $i/20 - $(date)"

            # Get service status
            SERVICE_STATUS=$(aws ecs describe-services \
              --cluster conflicto-${ENV}-cluster \
              --services conflicto-${ENV}-frontend-svc \
              --query 'services[0]' \
              --output json)

            RUNNING_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.runningCount')
            PENDING_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.pendingCount')
            DESIRED_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.desiredCount')

            echo "Service status: Running=$RUNNING_COUNT, Pending=$PENDING_COUNT, Desired=$DESIRED_COUNT"

            # Check if service is stable
            if [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ] && [ "$PENDING_COUNT" = "0" ]; then
              echo "✅ Service is stable!"
              break
            fi

            # Get the latest tasks to see what's happening
            LATEST_TASKS=$(aws ecs list-tasks \
              --cluster conflicto-${ENV}-cluster \
              --service-name conflicto-${ENV}-frontend-svc \
              --desired-status RUNNING \
              --query 'taskArns[0:2]' \
              --output text)

            if [ -n "$LATEST_TASKS" ] && [ "$LATEST_TASKS" != "None" ]; then
              echo "Latest task statuses:"
              aws ecs describe-tasks \
                --cluster conflicto-${ENV}-cluster \
                --tasks $LATEST_TASKS \
                --query 'tasks[].{TaskArn:taskArn,LastStatus:lastStatus,HealthStatus:healthStatus,StoppedReason:stoppedReason}' \
                --output table

              # Check for failed tasks
              FAILED_TASKS=$(aws ecs describe-tasks \
                --cluster conflicto-${ENV}-cluster \
                --tasks $LATEST_TASKS \
                --query 'tasks[?lastStatus==`STOPPED` && containers[0].exitCode!=`0`].taskArn' \
                --output text)

              if [ -n "$FAILED_TASKS" ] && [ "$FAILED_TASKS" != "None" ]; then
                echo "❌ Found failed tasks, checking logs..."

                # Get logs for failed tasks
                aws logs filter-log-events \
                  --log-group-name "/ecs/conflicto-${ENV}-task" \
                  --start-time $(date -d '10 minutes ago' +%s)000 \
                  --filter-pattern "frontend" \
                  --query 'events[0:10].{Time:timestamp,Message:message}' \
                  --output table || echo "No logs found or error retrieving logs"
              fi
            fi

            sleep 30
          done

          # Final check
          FINAL_RUNNING=$(aws ecs describe-services \
            --cluster conflicto-${ENV}-cluster \
            --services conflicto-${ENV}-frontend-svc \
            --query 'services[0].runningCount' \
            --output text)

          FINAL_DESIRED=$(aws ecs describe-services \
            --cluster conflicto-${ENV}-cluster \
            --services conflicto-${ENV}-frontend-svc \
            --query 'services[0].desiredCount' \
            --output text)

          if [ "$FINAL_RUNNING" != "$FINAL_DESIRED" ]; then
            echo "❌ Deployment failed - service did not stabilize"
            echo "Final status: $FINAL_RUNNING/$FINAL_DESIRED tasks running"

            # Get comprehensive troubleshooting info
            echo "=== TROUBLESHOOTING INFO ==="

            echo "Service events (last 10):"
            aws ecs describe-services \
              --cluster conflicto-${ENV}-cluster \
              --services conflicto-${ENV}-frontend-svc \
              --query 'services[0].events[0:10].{Time:createdAt,Message:message}' \
              --output table

            echo "Security groups and subnets:"
            aws ecs describe-services \
              --cluster conflicto-${ENV}-cluster \
              --services conflicto-${ENV}-frontend-svc \
              --query 'services[0].networkConfiguration' \
              --output json

            exit 1
          fi

          echo "✅ Frontend service deployment successful!"

      # Output deployment info
      - name: Deployment summary
        env:
          ENV: ${{ steps.vars.outputs.environment }}
          IMAGE_URI: ${{ steps.vars.outputs.image_uri }}
        run: |
          echo "## Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${ENV}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${IMAGE_URI}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster:** conflicto-${ENV}-cluster" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** conflicto-${ENV}-frontend-svc" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Frontend deployment successful!" >> $GITHUB_STEP_SUMMARY
